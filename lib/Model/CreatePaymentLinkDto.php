<?php
/**
 * CreatePaymentLinkDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Devdraft AI Payment & Business Management API
 *
 * A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.65
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DevDraftAISDK\Model;

use \ArrayAccess;
use \DevDraftAISDK\ObjectSerializer;

/**
 * CreatePaymentLinkDto Class Doc Comment
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreatePaymentLinkDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreatePaymentLinkDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
        'url' => 'string',
        'description' => 'string',
        'cover_image' => 'string',
        'link_type' => 'string',
        'amount' => 'float',
        'payment_for_id' => 'string',
        'recurring_type' => 'string',
        'customer_id' => 'string',
        'payment_link_products' => '\DevDraftAISDK\Model\PaymentLinkProductDto[]',
        'is_for_all_product' => 'bool',
        'allow_quantity_adjustment' => 'bool',
        'collect_tax' => 'bool',
        'tax_id' => 'string',
        'collect_address' => 'bool',
        'require_phone_number' => 'bool',
        'limit_payments' => 'bool',
        'max_payments' => 'float',
        'custom_fields' => 'object',
        'allow_business_tax_id' => 'bool',
        'allow_mobile_payment' => 'bool',
        'confirmation_page' => 'string',
        'create_invoice_pdf' => 'bool',
        'currency' => 'string',
        'expiration_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
        'url' => null,
        'description' => null,
        'cover_image' => null,
        'link_type' => null,
        'amount' => null,
        'payment_for_id' => null,
        'recurring_type' => null,
        'customer_id' => null,
        'payment_link_products' => null,
        'is_for_all_product' => null,
        'allow_quantity_adjustment' => null,
        'collect_tax' => null,
        'tax_id' => null,
        'collect_address' => null,
        'require_phone_number' => null,
        'limit_payments' => null,
        'max_payments' => null,
        'custom_fields' => null,
        'allow_business_tax_id' => null,
        'allow_mobile_payment' => null,
        'confirmation_page' => null,
        'create_invoice_pdf' => null,
        'currency' => null,
        'expiration_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'url' => 'url',
        'description' => 'description',
        'cover_image' => 'coverImage',
        'link_type' => 'linkType',
        'amount' => 'amount',
        'payment_for_id' => 'paymentForId',
        'recurring_type' => 'recurringType',
        'customer_id' => 'customerId',
        'payment_link_products' => 'paymentLinkProducts',
        'is_for_all_product' => 'isForAllProduct',
        'allow_quantity_adjustment' => 'allowQuantityAdjustment',
        'collect_tax' => 'collectTax',
        'tax_id' => 'taxId',
        'collect_address' => 'collectAddress',
        'require_phone_number' => 'requirePhoneNumber',
        'limit_payments' => 'limitPayments',
        'max_payments' => 'maxPayments',
        'custom_fields' => 'customFields',
        'allow_business_tax_id' => 'allowBusinessTaxId',
        'allow_mobile_payment' => 'allowMobilePayment',
        'confirmation_page' => 'confirmationPage',
        'create_invoice_pdf' => 'createInvoicePdf',
        'currency' => 'currency',
        'expiration_date' => 'expiration_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'url' => 'setUrl',
        'description' => 'setDescription',
        'cover_image' => 'setCoverImage',
        'link_type' => 'setLinkType',
        'amount' => 'setAmount',
        'payment_for_id' => 'setPaymentForId',
        'recurring_type' => 'setRecurringType',
        'customer_id' => 'setCustomerId',
        'payment_link_products' => 'setPaymentLinkProducts',
        'is_for_all_product' => 'setIsForAllProduct',
        'allow_quantity_adjustment' => 'setAllowQuantityAdjustment',
        'collect_tax' => 'setCollectTax',
        'tax_id' => 'setTaxId',
        'collect_address' => 'setCollectAddress',
        'require_phone_number' => 'setRequirePhoneNumber',
        'limit_payments' => 'setLimitPayments',
        'max_payments' => 'setMaxPayments',
        'custom_fields' => 'setCustomFields',
        'allow_business_tax_id' => 'setAllowBusinessTaxId',
        'allow_mobile_payment' => 'setAllowMobilePayment',
        'confirmation_page' => 'setConfirmationPage',
        'create_invoice_pdf' => 'setCreateInvoicePdf',
        'currency' => 'setCurrency',
        'expiration_date' => 'setExpirationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'url' => 'getUrl',
        'description' => 'getDescription',
        'cover_image' => 'getCoverImage',
        'link_type' => 'getLinkType',
        'amount' => 'getAmount',
        'payment_for_id' => 'getPaymentForId',
        'recurring_type' => 'getRecurringType',
        'customer_id' => 'getCustomerId',
        'payment_link_products' => 'getPaymentLinkProducts',
        'is_for_all_product' => 'getIsForAllProduct',
        'allow_quantity_adjustment' => 'getAllowQuantityAdjustment',
        'collect_tax' => 'getCollectTax',
        'tax_id' => 'getTaxId',
        'collect_address' => 'getCollectAddress',
        'require_phone_number' => 'getRequirePhoneNumber',
        'limit_payments' => 'getLimitPayments',
        'max_payments' => 'getMaxPayments',
        'custom_fields' => 'getCustomFields',
        'allow_business_tax_id' => 'getAllowBusinessTaxId',
        'allow_mobile_payment' => 'getAllowMobilePayment',
        'confirmation_page' => 'getConfirmationPage',
        'create_invoice_pdf' => 'getCreateInvoicePdf',
        'currency' => 'getCurrency',
        'expiration_date' => 'getExpirationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LINK_TYPE_INVOICE = 'INVOICE';
    const LINK_TYPE_PRODUCT = 'PRODUCT';
    const LINK_TYPE_COLLECTION = 'COLLECTION';
    const LINK_TYPE_SUBSCRIPTION = 'SUBSCRIPTION';
    const LINK_TYPE_DONATION = 'DONATION';
    const RECURRING_TYPE_ONE_TIME = 'ONE_TIME';
    const RECURRING_TYPE_WEEKLY = 'WEEKLY';
    const RECURRING_TYPE_BI_WEEKLY = 'BI_WEEKLY';
    const RECURRING_TYPE_MONTHLY = 'MONTHLY';
    const RECURRING_TYPE_BI_MONTHLY = 'BI_MONTHLY';
    const RECURRING_TYPE_QUARTERLY = 'QUARTERLY';
    const RECURRING_TYPE_ANNUALLY = 'ANNUALLY';
    const CONFIRMATION_PAGE_SHOW = 'SHOW';
    const CONFIRMATION_PAGE_REDIRECT = 'REDIRECT';
    const CURRENCY_USDC = 'usdc';
    const CURRENCY_EURC = 'eurc';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkTypeAllowableValues()
    {
        return [
            self::LINK_TYPE_INVOICE,
            self::LINK_TYPE_PRODUCT,
            self::LINK_TYPE_COLLECTION,
            self::LINK_TYPE_SUBSCRIPTION,
            self::LINK_TYPE_DONATION,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecurringTypeAllowableValues()
    {
        return [
            self::RECURRING_TYPE_ONE_TIME,
            self::RECURRING_TYPE_WEEKLY,
            self::RECURRING_TYPE_BI_WEEKLY,
            self::RECURRING_TYPE_MONTHLY,
            self::RECURRING_TYPE_BI_MONTHLY,
            self::RECURRING_TYPE_QUARTERLY,
            self::RECURRING_TYPE_ANNUALLY,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConfirmationPageAllowableValues()
    {
        return [
            self::CONFIRMATION_PAGE_SHOW,
            self::CONFIRMATION_PAGE_REDIRECT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_USDC,
            self::CURRENCY_EURC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['cover_image'] = isset($data['cover_image']) ? $data['cover_image'] : null;
        $this->container['link_type'] = isset($data['link_type']) ? $data['link_type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['payment_for_id'] = isset($data['payment_for_id']) ? $data['payment_for_id'] : null;
        $this->container['recurring_type'] = isset($data['recurring_type']) ? $data['recurring_type'] : 'ONE_TIME';
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['payment_link_products'] = isset($data['payment_link_products']) ? $data['payment_link_products'] : null;
        $this->container['is_for_all_product'] = isset($data['is_for_all_product']) ? $data['is_for_all_product'] : false;
        $this->container['allow_quantity_adjustment'] = isset($data['allow_quantity_adjustment']) ? $data['allow_quantity_adjustment'] : true;
        $this->container['collect_tax'] = isset($data['collect_tax']) ? $data['collect_tax'] : false;
        $this->container['tax_id'] = isset($data['tax_id']) ? $data['tax_id'] : null;
        $this->container['collect_address'] = isset($data['collect_address']) ? $data['collect_address'] : false;
        $this->container['require_phone_number'] = isset($data['require_phone_number']) ? $data['require_phone_number'] : false;
        $this->container['limit_payments'] = isset($data['limit_payments']) ? $data['limit_payments'] : false;
        $this->container['max_payments'] = isset($data['max_payments']) ? $data['max_payments'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['allow_business_tax_id'] = isset($data['allow_business_tax_id']) ? $data['allow_business_tax_id'] : false;
        $this->container['allow_mobile_payment'] = isset($data['allow_mobile_payment']) ? $data['allow_mobile_payment'] : false;
        $this->container['confirmation_page'] = isset($data['confirmation_page']) ? $data['confirmation_page'] : 'SHOW';
        $this->container['create_invoice_pdf'] = isset($data['create_invoice_pdf']) ? $data['create_invoice_pdf'] : false;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : 'usdc';
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['link_type'] === null) {
            $invalidProperties[] = "'link_type' can't be null";
        }
        $allowedValues = $this->getLinkTypeAllowableValues();
        if (!is_null($this->container['link_type']) && !in_array($this->container['link_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'link_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['recurring_type'] === null) {
            $invalidProperties[] = "'recurring_type' can't be null";
        }
        $allowedValues = $this->getRecurringTypeAllowableValues();
        if (!is_null($this->container['recurring_type']) && !in_array($this->container['recurring_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'recurring_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['allow_quantity_adjustment'] === null) {
            $invalidProperties[] = "'allow_quantity_adjustment' can't be null";
        }
        if ($this->container['collect_tax'] === null) {
            $invalidProperties[] = "'collect_tax' can't be null";
        }
        if ($this->container['collect_address'] === null) {
            $invalidProperties[] = "'collect_address' can't be null";
        }
        if ($this->container['require_phone_number'] === null) {
            $invalidProperties[] = "'require_phone_number' can't be null";
        }
        if ($this->container['allow_mobile_payment'] === null) {
            $invalidProperties[] = "'allow_mobile_payment' can't be null";
        }
        if ($this->container['confirmation_page'] === null) {
            $invalidProperties[] = "'confirmation_page' can't be null";
        }
        $allowedValues = $this->getConfirmationPageAllowableValues();
        if (!is_null($this->container['confirmation_page']) && !in_array($this->container['confirmation_page'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'confirmation_page', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['create_invoice_pdf'] === null) {
            $invalidProperties[] = "'create_invoice_pdf' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Display title for the payment link. This appears on the checkout page and in customer communications.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Unique URL slug for the payment link. Can be a full URL or just the path segment. Must be unique within your account.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Detailed description of what the customer is purchasing. Supports markdown formatting.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets cover_image
     *
     * @return string
     */
    public function getCoverImage()
    {
        return $this->container['cover_image'];
    }

    /**
     * Sets cover_image
     *
     * @param string $cover_image Cover image URL
     *
     * @return $this
     */
    public function setCoverImage($cover_image)
    {
        $this->container['cover_image'] = $cover_image;

        return $this;
    }

    /**
     * Gets link_type
     *
     * @return string
     */
    public function getLinkType()
    {
        return $this->container['link_type'];
    }

    /**
     * Sets link_type
     *
     * @param string $link_type Type of the payment link
     *
     * @return $this
     */
    public function setLinkType($link_type)
    {
        $allowedValues = $this->getLinkTypeAllowableValues();
        if (!in_array($link_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'link_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_type'] = $link_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount for the payment link
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets payment_for_id
     *
     * @return string
     */
    public function getPaymentForId()
    {
        return $this->container['payment_for_id'];
    }

    /**
     * Sets payment_for_id
     *
     * @param string $payment_for_id Payment for ID
     *
     * @return $this
     */
    public function setPaymentForId($payment_for_id)
    {
        $this->container['payment_for_id'] = $payment_for_id;

        return $this;
    }

    /**
     * Gets recurring_type
     *
     * @return string
     */
    public function getRecurringType()
    {
        return $this->container['recurring_type'];
    }

    /**
     * Sets recurring_type
     *
     * @param string $recurring_type Recurring type
     *
     * @return $this
     */
    public function setRecurringType($recurring_type)
    {
        $allowedValues = $this->getRecurringTypeAllowableValues();
        if (!in_array($recurring_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'recurring_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recurring_type'] = $recurring_type;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Customer ID
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets payment_link_products
     *
     * @return \DevDraftAISDK\Model\PaymentLinkProductDto[]
     */
    public function getPaymentLinkProducts()
    {
        return $this->container['payment_link_products'];
    }

    /**
     * Sets payment_link_products
     *
     * @param \DevDraftAISDK\Model\PaymentLinkProductDto[] $payment_link_products Array of products in the payment link
     *
     * @return $this
     */
    public function setPaymentLinkProducts($payment_link_products)
    {
        $this->container['payment_link_products'] = $payment_link_products;

        return $this;
    }

    /**
     * Gets is_for_all_product
     *
     * @return bool
     */
    public function getIsForAllProduct()
    {
        return $this->container['is_for_all_product'];
    }

    /**
     * Sets is_for_all_product
     *
     * @param bool $is_for_all_product Whether the payment link is for all products
     *
     * @return $this
     */
    public function setIsForAllProduct($is_for_all_product)
    {
        $this->container['is_for_all_product'] = $is_for_all_product;

        return $this;
    }

    /**
     * Gets allow_quantity_adjustment
     *
     * @return bool
     */
    public function getAllowQuantityAdjustment()
    {
        return $this->container['allow_quantity_adjustment'];
    }

    /**
     * Sets allow_quantity_adjustment
     *
     * @param bool $allow_quantity_adjustment Whether to allow quantity adjustment
     *
     * @return $this
     */
    public function setAllowQuantityAdjustment($allow_quantity_adjustment)
    {
        $this->container['allow_quantity_adjustment'] = $allow_quantity_adjustment;

        return $this;
    }

    /**
     * Gets collect_tax
     *
     * @return bool
     */
    public function getCollectTax()
    {
        return $this->container['collect_tax'];
    }

    /**
     * Sets collect_tax
     *
     * @param bool $collect_tax Whether to collect tax
     *
     * @return $this
     */
    public function setCollectTax($collect_tax)
    {
        $this->container['collect_tax'] = $collect_tax;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string $tax_id Tax ID
     *
     * @return $this
     */
    public function setTaxId($tax_id)
    {
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets collect_address
     *
     * @return bool
     */
    public function getCollectAddress()
    {
        return $this->container['collect_address'];
    }

    /**
     * Sets collect_address
     *
     * @param bool $collect_address Whether to collect address
     *
     * @return $this
     */
    public function setCollectAddress($collect_address)
    {
        $this->container['collect_address'] = $collect_address;

        return $this;
    }

    /**
     * Gets require_phone_number
     *
     * @return bool
     */
    public function getRequirePhoneNumber()
    {
        return $this->container['require_phone_number'];
    }

    /**
     * Sets require_phone_number
     *
     * @param bool $require_phone_number Whether to require phone number
     *
     * @return $this
     */
    public function setRequirePhoneNumber($require_phone_number)
    {
        $this->container['require_phone_number'] = $require_phone_number;

        return $this;
    }

    /**
     * Gets limit_payments
     *
     * @return bool
     */
    public function getLimitPayments()
    {
        return $this->container['limit_payments'];
    }

    /**
     * Sets limit_payments
     *
     * @param bool $limit_payments Whether to limit payments
     *
     * @return $this
     */
    public function setLimitPayments($limit_payments)
    {
        $this->container['limit_payments'] = $limit_payments;

        return $this;
    }

    /**
     * Gets max_payments
     *
     * @return float
     */
    public function getMaxPayments()
    {
        return $this->container['max_payments'];
    }

    /**
     * Sets max_payments
     *
     * @param float $max_payments Maximum number of payments
     *
     * @return $this
     */
    public function setMaxPayments($max_payments)
    {
        $this->container['max_payments'] = $max_payments;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields Custom fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets allow_business_tax_id
     *
     * @return bool
     */
    public function getAllowBusinessTaxId()
    {
        return $this->container['allow_business_tax_id'];
    }

    /**
     * Sets allow_business_tax_id
     *
     * @param bool $allow_business_tax_id Whether to allow business tax ID
     *
     * @return $this
     */
    public function setAllowBusinessTaxId($allow_business_tax_id)
    {
        $this->container['allow_business_tax_id'] = $allow_business_tax_id;

        return $this;
    }

    /**
     * Gets allow_mobile_payment
     *
     * @return bool
     */
    public function getAllowMobilePayment()
    {
        return $this->container['allow_mobile_payment'];
    }

    /**
     * Sets allow_mobile_payment
     *
     * @param bool $allow_mobile_payment Whether to allow mobile payment
     *
     * @return $this
     */
    public function setAllowMobilePayment($allow_mobile_payment)
    {
        $this->container['allow_mobile_payment'] = $allow_mobile_payment;

        return $this;
    }

    /**
     * Gets confirmation_page
     *
     * @return string
     */
    public function getConfirmationPage()
    {
        return $this->container['confirmation_page'];
    }

    /**
     * Sets confirmation_page
     *
     * @param string $confirmation_page Confirmation page type
     *
     * @return $this
     */
    public function setConfirmationPage($confirmation_page)
    {
        $allowedValues = $this->getConfirmationPageAllowableValues();
        if (!in_array($confirmation_page, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'confirmation_page', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['confirmation_page'] = $confirmation_page;

        return $this;
    }

    /**
     * Gets create_invoice_pdf
     *
     * @return bool
     */
    public function getCreateInvoicePdf()
    {
        return $this->container['create_invoice_pdf'];
    }

    /**
     * Sets create_invoice_pdf
     *
     * @param bool $create_invoice_pdf Whether to create invoice PDF
     *
     * @return $this
     */
    public function setCreateInvoicePdf($create_invoice_pdf)
    {
        $this->container['create_invoice_pdf'] = $create_invoice_pdf;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date Expiration date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
