<?php
/**
 * CreateBankPaymentIntentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Devdraft AI Payment & Business Management API
 *
 * A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.65
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DevDraftAISDK\Model;

use \ArrayAccess;
use \DevDraftAISDK\ObjectSerializer;

/**
 * CreateBankPaymentIntentDto Class Doc Comment
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateBankPaymentIntentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateBankPaymentIntentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'source_payment_rail' => 'AllOfCreateBankPaymentIntentDtoSourcePaymentRail',
        'source_currency' => 'AllOfCreateBankPaymentIntentDtoSourceCurrency',
        'destination_currency' => 'AllOfCreateBankPaymentIntentDtoDestinationCurrency',
        'destination_network' => 'AllOfCreateBankPaymentIntentDtoDestinationNetwork',
        'destination_address' => 'string',
        'amount' => 'string',
        'customer_first_name' => 'string',
        'customer_last_name' => 'string',
        'customer_email' => 'string',
        'customer_address' => 'string',
        'customer_country' => 'string',
        'customer_country_iso' => 'string',
        'customer_province' => 'string',
        'customer_province_iso' => 'string',
        'phone_number' => 'string',
        'wire_message' => 'string',
        'sepa_reference' => 'string',
        'ach_reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'source_payment_rail' => null,
        'source_currency' => null,
        'destination_currency' => null,
        'destination_network' => null,
        'destination_address' => null,
        'amount' => null,
        'customer_first_name' => null,
        'customer_last_name' => null,
        'customer_email' => null,
        'customer_address' => null,
        'customer_country' => null,
        'customer_country_iso' => null,
        'customer_province' => null,
        'customer_province_iso' => null,
        'phone_number' => null,
        'wire_message' => null,
        'sepa_reference' => null,
        'ach_reference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source_payment_rail' => 'sourcePaymentRail',
        'source_currency' => 'sourceCurrency',
        'destination_currency' => 'destinationCurrency',
        'destination_network' => 'destinationNetwork',
        'destination_address' => 'destinationAddress',
        'amount' => 'amount',
        'customer_first_name' => 'customer_first_name',
        'customer_last_name' => 'customer_last_name',
        'customer_email' => 'customer_email',
        'customer_address' => 'customer_address',
        'customer_country' => 'customer_country',
        'customer_country_iso' => 'customer_countryISO',
        'customer_province' => 'customer_province',
        'customer_province_iso' => 'customer_provinceISO',
        'phone_number' => 'phoneNumber',
        'wire_message' => 'wire_message',
        'sepa_reference' => 'sepa_reference',
        'ach_reference' => 'ach_reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source_payment_rail' => 'setSourcePaymentRail',
        'source_currency' => 'setSourceCurrency',
        'destination_currency' => 'setDestinationCurrency',
        'destination_network' => 'setDestinationNetwork',
        'destination_address' => 'setDestinationAddress',
        'amount' => 'setAmount',
        'customer_first_name' => 'setCustomerFirstName',
        'customer_last_name' => 'setCustomerLastName',
        'customer_email' => 'setCustomerEmail',
        'customer_address' => 'setCustomerAddress',
        'customer_country' => 'setCustomerCountry',
        'customer_country_iso' => 'setCustomerCountryIso',
        'customer_province' => 'setCustomerProvince',
        'customer_province_iso' => 'setCustomerProvinceIso',
        'phone_number' => 'setPhoneNumber',
        'wire_message' => 'setWireMessage',
        'sepa_reference' => 'setSepaReference',
        'ach_reference' => 'setAchReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source_payment_rail' => 'getSourcePaymentRail',
        'source_currency' => 'getSourceCurrency',
        'destination_currency' => 'getDestinationCurrency',
        'destination_network' => 'getDestinationNetwork',
        'destination_address' => 'getDestinationAddress',
        'amount' => 'getAmount',
        'customer_first_name' => 'getCustomerFirstName',
        'customer_last_name' => 'getCustomerLastName',
        'customer_email' => 'getCustomerEmail',
        'customer_address' => 'getCustomerAddress',
        'customer_country' => 'getCustomerCountry',
        'customer_country_iso' => 'getCustomerCountryIso',
        'customer_province' => 'getCustomerProvince',
        'customer_province_iso' => 'getCustomerProvinceIso',
        'phone_number' => 'getPhoneNumber',
        'wire_message' => 'getWireMessage',
        'sepa_reference' => 'getSepaReference',
        'ach_reference' => 'getAchReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['source_payment_rail'] = isset($data['source_payment_rail']) ? $data['source_payment_rail'] : null;
        $this->container['source_currency'] = isset($data['source_currency']) ? $data['source_currency'] : null;
        $this->container['destination_currency'] = isset($data['destination_currency']) ? $data['destination_currency'] : null;
        $this->container['destination_network'] = isset($data['destination_network']) ? $data['destination_network'] : null;
        $this->container['destination_address'] = isset($data['destination_address']) ? $data['destination_address'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['customer_first_name'] = isset($data['customer_first_name']) ? $data['customer_first_name'] : null;
        $this->container['customer_last_name'] = isset($data['customer_last_name']) ? $data['customer_last_name'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
        $this->container['customer_address'] = isset($data['customer_address']) ? $data['customer_address'] : null;
        $this->container['customer_country'] = isset($data['customer_country']) ? $data['customer_country'] : null;
        $this->container['customer_country_iso'] = isset($data['customer_country_iso']) ? $data['customer_country_iso'] : null;
        $this->container['customer_province'] = isset($data['customer_province']) ? $data['customer_province'] : null;
        $this->container['customer_province_iso'] = isset($data['customer_province_iso']) ? $data['customer_province_iso'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['wire_message'] = isset($data['wire_message']) ? $data['wire_message'] : null;
        $this->container['sepa_reference'] = isset($data['sepa_reference']) ? $data['sepa_reference'] : null;
        $this->container['ach_reference'] = isset($data['ach_reference']) ? $data['ach_reference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['source_payment_rail'] === null) {
            $invalidProperties[] = "'source_payment_rail' can't be null";
        }
        if ($this->container['source_currency'] === null) {
            $invalidProperties[] = "'source_currency' can't be null";
        }
        if ($this->container['destination_currency'] === null) {
            $invalidProperties[] = "'destination_currency' can't be null";
        }
        if ($this->container['destination_network'] === null) {
            $invalidProperties[] = "'destination_network' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source_payment_rail
     *
     * @return AllOfCreateBankPaymentIntentDtoSourcePaymentRail
     */
    public function getSourcePaymentRail()
    {
        return $this->container['source_payment_rail'];
    }

    /**
     * Sets source_payment_rail
     *
     * @param AllOfCreateBankPaymentIntentDtoSourcePaymentRail $source_payment_rail The banking payment method to use for the transfer. Determines processing time and fees.
     *
     * @return $this
     */
    public function setSourcePaymentRail($source_payment_rail)
    {
        $this->container['source_payment_rail'] = $source_payment_rail;

        return $this;
    }

    /**
     * Gets source_currency
     *
     * @return AllOfCreateBankPaymentIntentDtoSourceCurrency
     */
    public function getSourceCurrency()
    {
        return $this->container['source_currency'];
    }

    /**
     * Sets source_currency
     *
     * @param AllOfCreateBankPaymentIntentDtoSourceCurrency $source_currency The fiat currency to convert FROM. Must match the currency of the source payment rail.
     *
     * @return $this
     */
    public function setSourceCurrency($source_currency)
    {
        $this->container['source_currency'] = $source_currency;

        return $this;
    }

    /**
     * Gets destination_currency
     *
     * @return AllOfCreateBankPaymentIntentDtoDestinationCurrency
     */
    public function getDestinationCurrency()
    {
        return $this->container['destination_currency'];
    }

    /**
     * Sets destination_currency
     *
     * @param AllOfCreateBankPaymentIntentDtoDestinationCurrency $destination_currency The stablecoin currency to convert TO. The customer will receive this currency.
     *
     * @return $this
     */
    public function setDestinationCurrency($destination_currency)
    {
        $this->container['destination_currency'] = $destination_currency;

        return $this;
    }

    /**
     * Gets destination_network
     *
     * @return AllOfCreateBankPaymentIntentDtoDestinationNetwork
     */
    public function getDestinationNetwork()
    {
        return $this->container['destination_network'];
    }

    /**
     * Sets destination_network
     *
     * @param AllOfCreateBankPaymentIntentDtoDestinationNetwork $destination_network The blockchain network where the stablecoin will be delivered. Must support the destination currency.
     *
     * @return $this
     */
    public function setDestinationNetwork($destination_network)
    {
        $this->container['destination_network'] = $destination_network;

        return $this;
    }

    /**
     * Gets destination_address
     *
     * @return string
     */
    public function getDestinationAddress()
    {
        return $this->container['destination_address'];
    }

    /**
     * Sets destination_address
     *
     * @param string $destination_address Destination wallet address. Supports Ethereum (0x...) and Solana address formats.
     *
     * @return $this
     */
    public function setDestinationAddress($destination_address)
    {
        $this->container['destination_address'] = $destination_address;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount Payment amount (optional for flexible amount)
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets customer_first_name
     *
     * @return string
     */
    public function getCustomerFirstName()
    {
        return $this->container['customer_first_name'];
    }

    /**
     * Sets customer_first_name
     *
     * @param string $customer_first_name Customer first name
     *
     * @return $this
     */
    public function setCustomerFirstName($customer_first_name)
    {
        $this->container['customer_first_name'] = $customer_first_name;

        return $this;
    }

    /**
     * Gets customer_last_name
     *
     * @return string
     */
    public function getCustomerLastName()
    {
        return $this->container['customer_last_name'];
    }

    /**
     * Sets customer_last_name
     *
     * @param string $customer_last_name Customer last name
     *
     * @return $this
     */
    public function setCustomerLastName($customer_last_name)
    {
        $this->container['customer_last_name'] = $customer_last_name;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string $customer_email Customer email address
     *
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_address
     *
     * @return string
     */
    public function getCustomerAddress()
    {
        return $this->container['customer_address'];
    }

    /**
     * Sets customer_address
     *
     * @param string $customer_address Customer address
     *
     * @return $this
     */
    public function setCustomerAddress($customer_address)
    {
        $this->container['customer_address'] = $customer_address;

        return $this;
    }

    /**
     * Gets customer_country
     *
     * @return string
     */
    public function getCustomerCountry()
    {
        return $this->container['customer_country'];
    }

    /**
     * Sets customer_country
     *
     * @param string $customer_country Customer country
     *
     * @return $this
     */
    public function setCustomerCountry($customer_country)
    {
        $this->container['customer_country'] = $customer_country;

        return $this;
    }

    /**
     * Gets customer_country_iso
     *
     * @return string
     */
    public function getCustomerCountryIso()
    {
        return $this->container['customer_country_iso'];
    }

    /**
     * Sets customer_country_iso
     *
     * @param string $customer_country_iso Customer country ISO code
     *
     * @return $this
     */
    public function setCustomerCountryIso($customer_country_iso)
    {
        $this->container['customer_country_iso'] = $customer_country_iso;

        return $this;
    }

    /**
     * Gets customer_province
     *
     * @return string
     */
    public function getCustomerProvince()
    {
        return $this->container['customer_province'];
    }

    /**
     * Sets customer_province
     *
     * @param string $customer_province Customer province/state
     *
     * @return $this
     */
    public function setCustomerProvince($customer_province)
    {
        $this->container['customer_province'] = $customer_province;

        return $this;
    }

    /**
     * Gets customer_province_iso
     *
     * @return string
     */
    public function getCustomerProvinceIso()
    {
        return $this->container['customer_province_iso'];
    }

    /**
     * Sets customer_province_iso
     *
     * @param string $customer_province_iso Customer province/state ISO code
     *
     * @return $this
     */
    public function setCustomerProvinceIso($customer_province_iso)
    {
        $this->container['customer_province_iso'] = $customer_province_iso;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Customer phone number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets wire_message
     *
     * @return string
     */
    public function getWireMessage()
    {
        return $this->container['wire_message'];
    }

    /**
     * Sets wire_message
     *
     * @param string $wire_message Wire transfer message (for WIRE transfers)
     *
     * @return $this
     */
    public function setWireMessage($wire_message)
    {
        $this->container['wire_message'] = $wire_message;

        return $this;
    }

    /**
     * Gets sepa_reference
     *
     * @return string
     */
    public function getSepaReference()
    {
        return $this->container['sepa_reference'];
    }

    /**
     * Sets sepa_reference
     *
     * @param string $sepa_reference SEPA reference (for SEPA transfers)
     *
     * @return $this
     */
    public function setSepaReference($sepa_reference)
    {
        $this->container['sepa_reference'] = $sepa_reference;

        return $this;
    }

    /**
     * Gets ach_reference
     *
     * @return string
     */
    public function getAchReference()
    {
        return $this->container['ach_reference'];
    }

    /**
     * Sets ach_reference
     *
     * @param string $ach_reference ACH reference (for ACH transfers)
     *
     * @return $this
     */
    public function setAchReference($ach_reference)
    {
        $this->container['ach_reference'] = $ach_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
