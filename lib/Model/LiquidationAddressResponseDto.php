<?php
/**
 * LiquidationAddressResponseDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Devdraft AI Payment & Business Management API
 *
 * A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.65
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DevDraftAISDK\Model;

use \ArrayAccess;
use \DevDraftAISDK\ObjectSerializer;

/**
 * LiquidationAddressResponseDto Class Doc Comment
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LiquidationAddressResponseDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LiquidationAddressResponseDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'state' => 'string',
        'customer_id' => 'string',
        'chain' => 'string',
        'currency' => 'string',
        'address' => 'string',
        'external_account_id' => 'string',
        'prefunded_account_id' => 'string',
        'bridge_wallet_id' => 'string',
        'destination_payment_rail' => 'string',
        'destination_currency' => 'string',
        'custom_developer_fee_percent' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'state' => null,
        'customer_id' => null,
        'chain' => null,
        'currency' => null,
        'address' => null,
        'external_account_id' => null,
        'prefunded_account_id' => null,
        'bridge_wallet_id' => null,
        'destination_payment_rail' => null,
        'destination_currency' => null,
        'custom_developer_fee_percent' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'customer_id' => 'customer_id',
        'chain' => 'chain',
        'currency' => 'currency',
        'address' => 'address',
        'external_account_id' => 'external_account_id',
        'prefunded_account_id' => 'prefunded_account_id',
        'bridge_wallet_id' => 'bridge_wallet_id',
        'destination_payment_rail' => 'destination_payment_rail',
        'destination_currency' => 'destination_currency',
        'custom_developer_fee_percent' => 'custom_developer_fee_percent',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'customer_id' => 'setCustomerId',
        'chain' => 'setChain',
        'currency' => 'setCurrency',
        'address' => 'setAddress',
        'external_account_id' => 'setExternalAccountId',
        'prefunded_account_id' => 'setPrefundedAccountId',
        'bridge_wallet_id' => 'setBridgeWalletId',
        'destination_payment_rail' => 'setDestinationPaymentRail',
        'destination_currency' => 'setDestinationCurrency',
        'custom_developer_fee_percent' => 'setCustomDeveloperFeePercent',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'customer_id' => 'getCustomerId',
        'chain' => 'getChain',
        'currency' => 'getCurrency',
        'address' => 'getAddress',
        'external_account_id' => 'getExternalAccountId',
        'prefunded_account_id' => 'getPrefundedAccountId',
        'bridge_wallet_id' => 'getBridgeWalletId',
        'destination_payment_rail' => 'getDestinationPaymentRail',
        'destination_currency' => 'getDestinationCurrency',
        'custom_developer_fee_percent' => 'getCustomDeveloperFeePercent',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['chain'] = isset($data['chain']) ? $data['chain'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['external_account_id'] = isset($data['external_account_id']) ? $data['external_account_id'] : null;
        $this->container['prefunded_account_id'] = isset($data['prefunded_account_id']) ? $data['prefunded_account_id'] : null;
        $this->container['bridge_wallet_id'] = isset($data['bridge_wallet_id']) ? $data['bridge_wallet_id'] : null;
        $this->container['destination_payment_rail'] = isset($data['destination_payment_rail']) ? $data['destination_payment_rail'] : null;
        $this->container['destination_currency'] = isset($data['destination_currency']) ? $data['destination_currency'] : null;
        $this->container['custom_developer_fee_percent'] = isset($data['custom_developer_fee_percent']) ? $data['custom_developer_fee_percent'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['chain'] === null) {
            $invalidProperties[] = "'chain' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for the liquidation address
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Current state of the liquidation address
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Customer ID this liquidation address belongs to
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets chain
     *
     * @return string
     */
    public function getChain()
    {
        return $this->container['chain'];
    }

    /**
     * Sets chain
     *
     * @param string $chain Blockchain chain
     *
     * @return $this
     */
    public function setChain($chain)
    {
        $this->container['chain'] = $chain;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Liquidation address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets external_account_id
     *
     * @return string
     */
    public function getExternalAccountId()
    {
        return $this->container['external_account_id'];
    }

    /**
     * Sets external_account_id
     *
     * @param string $external_account_id External account ID
     *
     * @return $this
     */
    public function setExternalAccountId($external_account_id)
    {
        $this->container['external_account_id'] = $external_account_id;

        return $this;
    }

    /**
     * Gets prefunded_account_id
     *
     * @return string
     */
    public function getPrefundedAccountId()
    {
        return $this->container['prefunded_account_id'];
    }

    /**
     * Sets prefunded_account_id
     *
     * @param string $prefunded_account_id Prefunded account ID
     *
     * @return $this
     */
    public function setPrefundedAccountId($prefunded_account_id)
    {
        $this->container['prefunded_account_id'] = $prefunded_account_id;

        return $this;
    }

    /**
     * Gets bridge_wallet_id
     *
     * @return string
     */
    public function getBridgeWalletId()
    {
        return $this->container['bridge_wallet_id'];
    }

    /**
     * Sets bridge_wallet_id
     *
     * @param string $bridge_wallet_id Bridge wallet ID
     *
     * @return $this
     */
    public function setBridgeWalletId($bridge_wallet_id)
    {
        $this->container['bridge_wallet_id'] = $bridge_wallet_id;

        return $this;
    }

    /**
     * Gets destination_payment_rail
     *
     * @return string
     */
    public function getDestinationPaymentRail()
    {
        return $this->container['destination_payment_rail'];
    }

    /**
     * Sets destination_payment_rail
     *
     * @param string $destination_payment_rail Destination payment rail
     *
     * @return $this
     */
    public function setDestinationPaymentRail($destination_payment_rail)
    {
        $this->container['destination_payment_rail'] = $destination_payment_rail;

        return $this;
    }

    /**
     * Gets destination_currency
     *
     * @return string
     */
    public function getDestinationCurrency()
    {
        return $this->container['destination_currency'];
    }

    /**
     * Sets destination_currency
     *
     * @param string $destination_currency Destination currency
     *
     * @return $this
     */
    public function setDestinationCurrency($destination_currency)
    {
        $this->container['destination_currency'] = $destination_currency;

        return $this;
    }

    /**
     * Gets custom_developer_fee_percent
     *
     * @return string
     */
    public function getCustomDeveloperFeePercent()
    {
        return $this->container['custom_developer_fee_percent'];
    }

    /**
     * Sets custom_developer_fee_percent
     *
     * @param string $custom_developer_fee_percent Custom developer fee percent
     *
     * @return $this
     */
    public function setCustomDeveloperFeePercent($custom_developer_fee_percent)
    {
        $this->container['custom_developer_fee_percent'] = $custom_developer_fee_percent;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Creation timestamp
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at Last update timestamp
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
