<?php
/**
 * CreateDirectBankTransferDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Devdraft AI Payment & Business Management API
 *
 * A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.65
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DevDraftAISDK\Model;

use \ArrayAccess;
use \DevDraftAISDK\ObjectSerializer;

/**
 * CreateDirectBankTransferDto Class Doc Comment
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateDirectBankTransferDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateDirectBankTransferDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'wallet_id' => 'string',
        'payment_rail' => 'string',
        'destination_currency' => 'string',
        'source_currency' => 'string',
        'amount' => 'float',
        'wire_message' => 'string',
        'sepa_reference' => 'string',
        'ach_reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'wallet_id' => null,
        'payment_rail' => null,
        'destination_currency' => null,
        'source_currency' => null,
        'amount' => null,
        'wire_message' => null,
        'sepa_reference' => null,
        'ach_reference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wallet_id' => 'walletId',
        'payment_rail' => 'paymentRail',
        'destination_currency' => 'destinationCurrency',
        'source_currency' => 'sourceCurrency',
        'amount' => 'amount',
        'wire_message' => 'wire_message',
        'sepa_reference' => 'sepa_reference',
        'ach_reference' => 'ach_reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wallet_id' => 'setWalletId',
        'payment_rail' => 'setPaymentRail',
        'destination_currency' => 'setDestinationCurrency',
        'source_currency' => 'setSourceCurrency',
        'amount' => 'setAmount',
        'wire_message' => 'setWireMessage',
        'sepa_reference' => 'setSepaReference',
        'ach_reference' => 'setAchReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wallet_id' => 'getWalletId',
        'payment_rail' => 'getPaymentRail',
        'destination_currency' => 'getDestinationCurrency',
        'source_currency' => 'getSourceCurrency',
        'amount' => 'getAmount',
        'wire_message' => 'getWireMessage',
        'sepa_reference' => 'getSepaReference',
        'ach_reference' => 'getAchReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wallet_id'] = isset($data['wallet_id']) ? $data['wallet_id'] : null;
        $this->container['payment_rail'] = isset($data['payment_rail']) ? $data['payment_rail'] : null;
        $this->container['destination_currency'] = isset($data['destination_currency']) ? $data['destination_currency'] : null;
        $this->container['source_currency'] = isset($data['source_currency']) ? $data['source_currency'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['wire_message'] = isset($data['wire_message']) ? $data['wire_message'] : null;
        $this->container['sepa_reference'] = isset($data['sepa_reference']) ? $data['sepa_reference'] : null;
        $this->container['ach_reference'] = isset($data['ach_reference']) ? $data['ach_reference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['wallet_id'] === null) {
            $invalidProperties[] = "'wallet_id' can't be null";
        }
        if ($this->container['payment_rail'] === null) {
            $invalidProperties[] = "'payment_rail' can't be null";
        }
        if ($this->container['destination_currency'] === null) {
            $invalidProperties[] = "'destination_currency' can't be null";
        }
        if ($this->container['source_currency'] === null) {
            $invalidProperties[] = "'source_currency' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wallet_id
     *
     * @return string
     */
    public function getWalletId()
    {
        return $this->container['wallet_id'];
    }

    /**
     * Sets wallet_id
     *
     * @param string $wallet_id The ID of the bridge wallet to transfer from
     *
     * @return $this
     */
    public function setWalletId($wallet_id)
    {
        $this->container['wallet_id'] = $wallet_id;

        return $this;
    }

    /**
     * Gets payment_rail
     *
     * @return string
     */
    public function getPaymentRail()
    {
        return $this->container['payment_rail'];
    }

    /**
     * Sets payment_rail
     *
     * @param string $payment_rail The payment rail to use
     *
     * @return $this
     */
    public function setPaymentRail($payment_rail)
    {
        $this->container['payment_rail'] = $payment_rail;

        return $this;
    }

    /**
     * Gets destination_currency
     *
     * @return string
     */
    public function getDestinationCurrency()
    {
        return $this->container['destination_currency'];
    }

    /**
     * Sets destination_currency
     *
     * @param string $destination_currency The destination currency
     *
     * @return $this
     */
    public function setDestinationCurrency($destination_currency)
    {
        $this->container['destination_currency'] = $destination_currency;

        return $this;
    }

    /**
     * Gets source_currency
     *
     * @return string
     */
    public function getSourceCurrency()
    {
        return $this->container['source_currency'];
    }

    /**
     * Sets source_currency
     *
     * @param string $source_currency The source currency
     *
     * @return $this
     */
    public function setSourceCurrency($source_currency)
    {
        $this->container['source_currency'] = $source_currency;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount to transfer
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets wire_message
     *
     * @return string
     */
    public function getWireMessage()
    {
        return $this->container['wire_message'];
    }

    /**
     * Sets wire_message
     *
     * @param string $wire_message Wire transfer message
     *
     * @return $this
     */
    public function setWireMessage($wire_message)
    {
        $this->container['wire_message'] = $wire_message;

        return $this;
    }

    /**
     * Gets sepa_reference
     *
     * @return string
     */
    public function getSepaReference()
    {
        return $this->container['sepa_reference'];
    }

    /**
     * Sets sepa_reference
     *
     * @param string $sepa_reference SEPA transfer reference
     *
     * @return $this
     */
    public function setSepaReference($sepa_reference)
    {
        $this->container['sepa_reference'] = $sepa_reference;

        return $this;
    }

    /**
     * Gets ach_reference
     *
     * @return string
     */
    public function getAchReference()
    {
        return $this->container['ach_reference'];
    }

    /**
     * Sets ach_reference
     *
     * @param string $ach_reference ACH transfer reference
     *
     * @return $this
     */
    public function setAchReference($ach_reference)
    {
        $this->container['ach_reference'] = $ach_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
