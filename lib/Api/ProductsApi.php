<?php
/**
 * ProductsApi
 * PHP version 5
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Devdraft AI Payment & Business Management API
 *
 * A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.65
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DevDraftAISDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DevDraftAISDK\ApiException;
use DevDraftAISDK\Configuration;
use DevDraftAISDK\HeaderSelector;
use DevDraftAISDK\ObjectSerializer;

/**
 * ProductsApi Class Doc Comment
 *
 * @category Class
 * @package  DevDraftAISDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productControllerCreate
     *
     * Create a new product
     *
     * @param  string $name name (required)
     * @param  string $description description (required)
     * @param  float $price price (required)
     * @param  string $currency currency (required)
     * @param  string $type type (required)
     * @param  float $weight weight (required)
     * @param  string $unit unit (required)
     * @param  float $quantity quantity (required)
     * @param  float $stock_count stock_count (required)
     * @param  string $status status (required)
     * @param  string $product_type product_type (required)
     * @param  string[] $images images (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productControllerCreate($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images)
    {
        $this->productControllerCreateWithHttpInfo($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images);
    }

    /**
     * Operation productControllerCreateWithHttpInfo
     *
     * Create a new product
     *
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  float $price (required)
     * @param  string $currency (required)
     * @param  string $type (required)
     * @param  float $weight (required)
     * @param  string $unit (required)
     * @param  float $quantity (required)
     * @param  float $stock_count (required)
     * @param  string $status (required)
     * @param  string $product_type (required)
     * @param  string[] $images (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productControllerCreateWithHttpInfo($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images)
    {
        $returnType = '';
        $request = $this->productControllerCreateRequest($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productControllerCreateAsync
     *
     * Create a new product
     *
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  float $price (required)
     * @param  string $currency (required)
     * @param  string $type (required)
     * @param  float $weight (required)
     * @param  string $unit (required)
     * @param  float $quantity (required)
     * @param  float $stock_count (required)
     * @param  string $status (required)
     * @param  string $product_type (required)
     * @param  string[] $images (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerCreateAsync($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images)
    {
        return $this->productControllerCreateAsyncWithHttpInfo($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productControllerCreateAsyncWithHttpInfo
     *
     * Create a new product
     *
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  float $price (required)
     * @param  string $currency (required)
     * @param  string $type (required)
     * @param  float $weight (required)
     * @param  string $unit (required)
     * @param  float $quantity (required)
     * @param  float $stock_count (required)
     * @param  string $status (required)
     * @param  string $product_type (required)
     * @param  string[] $images (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerCreateAsyncWithHttpInfo($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images)
    {
        $returnType = '';
        $request = $this->productControllerCreateRequest($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productControllerCreate'
     *
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  float $price (required)
     * @param  string $currency (required)
     * @param  string $type (required)
     * @param  float $weight (required)
     * @param  string $unit (required)
     * @param  float $quantity (required)
     * @param  float $stock_count (required)
     * @param  string $status (required)
     * @param  string $product_type (required)
     * @param  string[] $images (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productControllerCreateRequest($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling productControllerCreate'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling productControllerCreate'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling productControllerCreate'
            );
        }
        // verify the required parameter 'currency' is set
        if ($currency === null || (is_array($currency) && count($currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency when calling productControllerCreate'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling productControllerCreate'
            );
        }
        // verify the required parameter 'weight' is set
        if ($weight === null || (is_array($weight) && count($weight) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $weight when calling productControllerCreate'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling productControllerCreate'
            );
        }
        // verify the required parameter 'quantity' is set
        if ($quantity === null || (is_array($quantity) && count($quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quantity when calling productControllerCreate'
            );
        }
        // verify the required parameter 'stock_count' is set
        if ($stock_count === null || (is_array($stock_count) && count($stock_count) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_count when calling productControllerCreate'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling productControllerCreate'
            );
        }
        // verify the required parameter 'product_type' is set
        if ($product_type === null || (is_array($product_type) && count($product_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_type when calling productControllerCreate'
            );
        }
        // verify the required parameter 'images' is set
        if ($images === null || (is_array($images) && count($images) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $images when calling productControllerCreate'
            );
        }

        $resourcePath = '/api/v0/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($currency !== null) {
            $formParams['currency'] = ObjectSerializer::toFormValue($currency);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($weight !== null) {
            $formParams['weight'] = ObjectSerializer::toFormValue($weight);
        }
        // form params
        if ($unit !== null) {
            $formParams['unit'] = ObjectSerializer::toFormValue($unit);
        }
        // form params
        if ($quantity !== null) {
            $formParams['quantity'] = ObjectSerializer::toFormValue($quantity);
        }
        // form params
        if ($stock_count !== null) {
            $formParams['stockCount'] = ObjectSerializer::toFormValue($stock_count);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($product_type !== null) {
            $formParams['productType'] = ObjectSerializer::toFormValue($product_type);
        }
        // form params
        if ($images !== null) {
            $formParams['images'] = ObjectSerializer::toFormValue($images);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-key');
        if ($apiKey !== null) {
            $headers['x-client-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-secret');
        if ($apiKey !== null) {
            $headers['x-client-secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productControllerFindAll
     *
     * Get all products
     *
     * @param  float $skip Number of records to skip (optional)
     * @param  float $take Number of records to take (optional)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productControllerFindAll($skip = null, $take = null)
    {
        $this->productControllerFindAllWithHttpInfo($skip, $take);
    }

    /**
     * Operation productControllerFindAllWithHttpInfo
     *
     * Get all products
     *
     * @param  float $skip Number of records to skip (optional)
     * @param  float $take Number of records to take (optional)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productControllerFindAllWithHttpInfo($skip = null, $take = null)
    {
        $returnType = '';
        $request = $this->productControllerFindAllRequest($skip, $take);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productControllerFindAllAsync
     *
     * Get all products
     *
     * @param  float $skip Number of records to skip (optional)
     * @param  float $take Number of records to take (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerFindAllAsync($skip = null, $take = null)
    {
        return $this->productControllerFindAllAsyncWithHttpInfo($skip, $take)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productControllerFindAllAsyncWithHttpInfo
     *
     * Get all products
     *
     * @param  float $skip Number of records to skip (optional)
     * @param  float $take Number of records to take (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerFindAllAsyncWithHttpInfo($skip = null, $take = null)
    {
        $returnType = '';
        $request = $this->productControllerFindAllRequest($skip, $take);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productControllerFindAll'
     *
     * @param  float $skip Number of records to skip (optional)
     * @param  float $take Number of records to take (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productControllerFindAllRequest($skip = null, $take = null)
    {

        $resourcePath = '/api/v0/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, null);
        }
        // query params
        if ($take !== null) {
            $queryParams['take'] = ObjectSerializer::toQueryValue($take, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-key');
        if ($apiKey !== null) {
            $headers['x-client-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-secret');
        if ($apiKey !== null) {
            $headers['x-client-secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productControllerFindOne
     *
     * Get a product by ID
     *
     * @param  string $id Product ID (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productControllerFindOne($id)
    {
        $this->productControllerFindOneWithHttpInfo($id);
    }

    /**
     * Operation productControllerFindOneWithHttpInfo
     *
     * Get a product by ID
     *
     * @param  string $id Product ID (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productControllerFindOneWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productControllerFindOneRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productControllerFindOneAsync
     *
     * Get a product by ID
     *
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerFindOneAsync($id)
    {
        return $this->productControllerFindOneAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productControllerFindOneAsyncWithHttpInfo
     *
     * Get a product by ID
     *
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerFindOneAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productControllerFindOneRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productControllerFindOne'
     *
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productControllerFindOneRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productControllerFindOne'
            );
        }

        $resourcePath = '/api/v0/products/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-key');
        if ($apiKey !== null) {
            $headers['x-client-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-secret');
        if ($apiKey !== null) {
            $headers['x-client-secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productControllerRemove
     *
     * Delete a product
     *
     * @param  string $id Product ID (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productControllerRemove($id)
    {
        $this->productControllerRemoveWithHttpInfo($id);
    }

    /**
     * Operation productControllerRemoveWithHttpInfo
     *
     * Delete a product
     *
     * @param  string $id Product ID (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productControllerRemoveWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productControllerRemoveRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productControllerRemoveAsync
     *
     * Delete a product
     *
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerRemoveAsync($id)
    {
        return $this->productControllerRemoveAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productControllerRemoveAsyncWithHttpInfo
     *
     * Delete a product
     *
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerRemoveAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productControllerRemoveRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productControllerRemove'
     *
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productControllerRemoveRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productControllerRemove'
            );
        }

        $resourcePath = '/api/v0/products/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-key');
        if ($apiKey !== null) {
            $headers['x-client-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-secret');
        if ($apiKey !== null) {
            $headers['x-client-secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productControllerUpdate
     *
     * Update a product
     *
     * @param  string $name name (required)
     * @param  string $description description (required)
     * @param  float $price price (required)
     * @param  string $currency currency (required)
     * @param  string $type type (required)
     * @param  float $weight weight (required)
     * @param  string $unit unit (required)
     * @param  float $quantity quantity (required)
     * @param  float $stock_count stock_count (required)
     * @param  string $status status (required)
     * @param  string $product_type product_type (required)
     * @param  string[] $images images (required)
     * @param  string $id Product ID (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productControllerUpdate($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images, $id)
    {
        $this->productControllerUpdateWithHttpInfo($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images, $id);
    }

    /**
     * Operation productControllerUpdateWithHttpInfo
     *
     * Update a product
     *
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  float $price (required)
     * @param  string $currency (required)
     * @param  string $type (required)
     * @param  float $weight (required)
     * @param  string $unit (required)
     * @param  float $quantity (required)
     * @param  float $stock_count (required)
     * @param  string $status (required)
     * @param  string $product_type (required)
     * @param  string[] $images (required)
     * @param  string $id Product ID (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productControllerUpdateWithHttpInfo($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images, $id)
    {
        $returnType = '';
        $request = $this->productControllerUpdateRequest($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productControllerUpdateAsync
     *
     * Update a product
     *
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  float $price (required)
     * @param  string $currency (required)
     * @param  string $type (required)
     * @param  float $weight (required)
     * @param  string $unit (required)
     * @param  float $quantity (required)
     * @param  float $stock_count (required)
     * @param  string $status (required)
     * @param  string $product_type (required)
     * @param  string[] $images (required)
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerUpdateAsync($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images, $id)
    {
        return $this->productControllerUpdateAsyncWithHttpInfo($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productControllerUpdateAsyncWithHttpInfo
     *
     * Update a product
     *
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  float $price (required)
     * @param  string $currency (required)
     * @param  string $type (required)
     * @param  float $weight (required)
     * @param  string $unit (required)
     * @param  float $quantity (required)
     * @param  float $stock_count (required)
     * @param  string $status (required)
     * @param  string $product_type (required)
     * @param  string[] $images (required)
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerUpdateAsyncWithHttpInfo($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images, $id)
    {
        $returnType = '';
        $request = $this->productControllerUpdateRequest($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productControllerUpdate'
     *
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  float $price (required)
     * @param  string $currency (required)
     * @param  string $type (required)
     * @param  float $weight (required)
     * @param  string $unit (required)
     * @param  float $quantity (required)
     * @param  float $stock_count (required)
     * @param  string $status (required)
     * @param  string $product_type (required)
     * @param  string[] $images (required)
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productControllerUpdateRequest($name, $description, $price, $currency, $type, $weight, $unit, $quantity, $stock_count, $status, $product_type, $images, $id)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'currency' is set
        if ($currency === null || (is_array($currency) && count($currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'weight' is set
        if ($weight === null || (is_array($weight) && count($weight) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $weight when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'quantity' is set
        if ($quantity === null || (is_array($quantity) && count($quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quantity when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'stock_count' is set
        if ($stock_count === null || (is_array($stock_count) && count($stock_count) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_count when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'product_type' is set
        if ($product_type === null || (is_array($product_type) && count($product_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_type when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'images' is set
        if ($images === null || (is_array($images) && count($images) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $images when calling productControllerUpdate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productControllerUpdate'
            );
        }

        $resourcePath = '/api/v0/products/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($currency !== null) {
            $formParams['currency'] = ObjectSerializer::toFormValue($currency);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($weight !== null) {
            $formParams['weight'] = ObjectSerializer::toFormValue($weight);
        }
        // form params
        if ($unit !== null) {
            $formParams['unit'] = ObjectSerializer::toFormValue($unit);
        }
        // form params
        if ($quantity !== null) {
            $formParams['quantity'] = ObjectSerializer::toFormValue($quantity);
        }
        // form params
        if ($stock_count !== null) {
            $formParams['stockCount'] = ObjectSerializer::toFormValue($stock_count);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($product_type !== null) {
            $formParams['productType'] = ObjectSerializer::toFormValue($product_type);
        }
        // form params
        if ($images !== null) {
            $formParams['images'] = ObjectSerializer::toFormValue($images);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-key');
        if ($apiKey !== null) {
            $headers['x-client-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-secret');
        if ($apiKey !== null) {
            $headers['x-client-secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productControllerUploadImage
     *
     * Upload images for a product
     *
     * @param  string $id Product ID (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productControllerUploadImage($id)
    {
        $this->productControllerUploadImageWithHttpInfo($id);
    }

    /**
     * Operation productControllerUploadImageWithHttpInfo
     *
     * Upload images for a product
     *
     * @param  string $id Product ID (required)
     *
     * @throws \DevDraftAISDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productControllerUploadImageWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productControllerUploadImageRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productControllerUploadImageAsync
     *
     * Upload images for a product
     *
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerUploadImageAsync($id)
    {
        return $this->productControllerUploadImageAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productControllerUploadImageAsyncWithHttpInfo
     *
     * Upload images for a product
     *
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productControllerUploadImageAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productControllerUploadImageRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productControllerUploadImage'
     *
     * @param  string $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productControllerUploadImageRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productControllerUploadImage'
            );
        }

        $resourcePath = '/api/v0/products/{id}/images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-key');
        if ($apiKey !== null) {
            $headers['x-client-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-client-secret');
        if ($apiKey !== null) {
            $headers['x-client-secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
